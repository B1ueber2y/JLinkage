cmake_minimum_required(VERSION 3.17)
project(JLinkage)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

MESSAGE("Build type: " ${CMAKE_BUILD_TYPE})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall   -O3 -march=native")

# Check C++11 or C++0x support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++11.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

include_directories(
${PROJECT_SOURCE_DIR}
${PROJECT_SOURCE_DIR}/include
${PROJECT_SOURCE_DIR}/include/bm
${PROJECT_SOURCE_DIR}/include/kdtree++
)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)

add_library(${PROJECT_NAME} SHARED
src/JLinkage.cpp
src/RandomSampler.cpp
src/Utilities.cpp
src/VPCluster.cpp
src/VPSample.cpp
src/updator.cpp
)

# Build examples
target_link_libraries(${PROJECT_NAME})
add_executable(main
./main.cpp)
target_link_libraries(main ${PROJECT_NAME})

# find_package(OpenCV 3.0 QUIET)
# if(NOT OpenCV_FOUND)
#    find_package(OpenCV 2.4.3 QUIET)
#    if(NOT OpenCV_FOUND)
#       message(FATAL_ERROR "OpenCV > 2.4.3 not found.")
#    else()
#       add_executable(detectline
#       ./detectLine.cpp)
#       target_link_libraries(detectline ${OpenCV_LIBS})
#    endif()
# else()
#    add_executable(detectline
#    ./detectLine.cpp)
#    target_link_libraries(detectline ${OpenCV_LIBS})
# endif()

set(JLINKAGE_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/include
                          ${PROJECT_SOURCE_DIR}/include/bm
                          ${PROJECT_SOURCE_DIR}/include/kdtree++
                          CACHE INTERNAL "${PROJECT_NAME}: Include Directories" FORCE)

